set nocompatible
set t_Co=256

runtime bundle/vim-pathogen/autoload/pathogen.vim
call pathogen#infect()
call pathogen#helptags()

" Pretty colors
if filereadable(expand("~/.vimrc_background"))
    let base16colorspace=256
    source ~/.vimrc_background
endif

filetype indent plugin on

syntax on
set showmatch

set nowrap
set number
set encoding=utf-8
set noshowmode
set hidden
set mouse=a

set hlsearch
set incsearch

set noexpandtab
set tabstop=4
set shiftwidth=4
set softtabstop=4
set ignorecase
set smartcase
set autochdir

set autoindent

set novisualbell
set noerrorbells

set ruler
set laststatus=2

set timeout timeoutlen=1000 ttimeoutlen=100 " fix slow O inserts

let mapleader = ","

map <C-n> :NERDTreeTabsToggle<CR>
let NERDTreeShowHidden=1

let g:airline#extensions#tabline#enabled = 0
let g:airline#extensions#tabline#fnamemod = ':t'
let g:airline_powerline_fonts=1

" open new split panes to right and bottom, which feels more natural
set splitbelow
set splitright

" ctrlp
let g:ctrlp_switch_buffer = 0
let g:ctrlp_show_hidden = 1
let g:ctrlp_clear_cache_on_exit = 0
" let g:ctrlp_cmd = 'CtrlPMRU'
let g:ctrlp_cache_dir = '~/.vim/ctrlpcache' 
let g:ctrlp_working_path_mode = 'ra'

" Window navigation
map <C-h> <C-w>h
map <C-j> <C-w>j
map <C-k> <C-w>k
map <C-l> <C-w>l


set statusline+=%#warningmsg#
set statusline+=%{SyntasticStatuslineFlag()}
set statusline+=%*

let g:syntastic_always_populate_loc_list = 1
let g:syntastic_auto_loc_list = 1
let g:syntastic_check_on_open = 1
let g:syntastic_check_on_wq = 0

let g:syntastic_cpp_compiler = 'clang++'
let g:syntastic_cpp_compiler_options = ' -std=c++11'

let g:ycm_global_ycm_extra_conf = '~/.dotfiles/vim/vim/.ycm_extra_conf.py'

autocmd FileType javascript let b:syntastic_checkers = findfile('.jscsrc', '.;') != '' ? ['jscs'] : ['jshint']

noremap <C-f> :Autoformat<CR>

set history=5000
set undolevels=5000

set nobackup
" Swap files out of the project root
set backupdir=~/.vim/backup
set directory=~/.vim/swap

" disable arrow keys
nnoremap <Left> :echoe "Use h"<CR>
nnoremap <Right> :echoe "Use l"<CR>
nnoremap <Up> :echoe "Use k"<CR>
nnoremap <Down> :echoe "Use j"<CR>

" Auto center on G
nmap G Gzz
nmap n nzz
nmap N Nzz
nmap } }zz
nmap { {zz}

" Autofix typo's
iabbr ture true
iabbr flase false

" Go to the same line after reopening a file
augroup line_return
    au!
    au BufReadPost *
        \ if line("'\"") > 0 && line("'\"") <= line("$") |
        \     execute 'normal! g`"zvzz' |
        \ endif
augroup END

nnoremap <Leader>f :CtrlPFunky<Cr>
" Narrow the list down with a word under cursor
nnoremap <Leader>F :execute 'CtrlPFunky ' . expand('<cword>')<Cr>

" see: https//robots.thoughtbot.com/faster-grepping-in-vim
" The Silver Searcher
if executable('ag')
    " Use ag over grep
    set grepprg=ag\ --nogroup\ --nocolor
    let g:ctrlp_user_command = 'ag %s -l --nocolor -g ""'
    " ag is fast enough that CtrlP doesn't need to cache
    let g:ctrlp_use_caching = 0
endif

" Tired of clearing highlighted searches?
nmap <silent> , / :nohlsearch<CR>

let g:loaded_matchparen=1
highlight MatchParen ctermbg=4 

" vim-test
nmap <silent> <leader>t :TestNearest<CR>
nmap <silent> <leader>T :TestFile<CR>
nmap <silent> <leader>a :TestSuite<CR>
nmap <silent> <leader>l :TestLast<CR>
nmap <silent> <leader>g :TestVisit<CR>

map <C-I> :bn<CR>

let test#strategy = "dispatch"
" vim-mocha
" map <Leader>t :call RunCurrentSpecFile()<CR>
" map <Leader>s :call RunNearestSpec()<CR>
" map <Leader>l :call RunLastSpec()<CR>
" map <Leader>a :call RunAllSpecs()<CR>
"
"
set wildignore+=*.so,*.swp,*.zip     " MacOSX/Linux
set wildignore+=*.swp,*.zip,*.exe  " Windows

" Save undo history
if has('persistent_undo')      "check if your vim version supports it
	set undofile                 "turn on the feature  
	set undodir=/tmp/vim/undo  "directory where the undo files will be stored
endif    

" Vim easytags
let g:easytags_async = 1
let g:easytags_file = '~/.vim/vimtags/tags'


